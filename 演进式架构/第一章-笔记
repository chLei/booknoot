对于架构师来说，架构水平体现在权衡业务需求和其他重要因素后找到最佳方案的能力

软件架构是有多个关键特征（除需求外的重要因素）的，比如：可审计性、数据、安全性、性能、合法性和伸缩性。

外部需求和软件开发体系是不断变化的，所以软件开发的过程实际是保障各维度动态平衡的过程，这种平衡比较脆弱，在变化过程中逐渐变得难以理解。同时软件架构在完成后，关键特征有可能进行衰退（架构比特衰退）。

因此书中提出在架构中添加演进能力，使其在系统演进时保护其他关键特征。演进能力是一种元特征和保护其他所有架构特征的架构封装器。

演进式架构定义：演进式架构支持跨多个维度的引导性增量变更。
1、增量变更：1）增量地构建软件；2）如何部署软件：业务功能的模块化和解耦水平，以及它们是如何映射到架构中
2、引导性：利用适应度函数，驱动架构设计决策，在保障关键维度不产生衰退的情况下，引导架构变更适应业务和技术环境变化。
3、维度：软件需求和其他维度（可审计性、数据、安全性、性能、合法性和伸缩性·），不同的视角有不同的维度，比如4+1视图或者C4模型

康威定律：
1、在设计系统时、组织所交付的方案结构将不可避免的与其沟通结构一致
2、每当新的团队组建，其他团队的职责范围会缩小，能够有效执行的可选设计方案也会随之变少：换句话说人们很难改变其职责范围外的事情。软件架构师需要时刻关注团队的分工模式，从而使架构目标和团队结构一致。
康威逆定律：
1、构建与目标系统架构（服务范围）相仿的团队结构

最终结论：
演进式架构主要由三方面构成：增量变更、适应度函数和适当的耦合